<?php 
// An input filter which expands the [qvideo] tag into appropriate code

/*
 * Implementation of hook_help().
 */

function qvideo_help($path, $arg) {
  switch ($path) {
    case 'admin/help#qvideo':
        $output = '<p>'. 
          t("This filter allows you to insert video clips into a page, as HTML5 with fallback to Flash.").
          t("Here is an example: [qvideo 640 480 video.mp4 video.ogv video.flv].</p>");
    return $output;
  }
}
 

function qvideo_filter($op, $delta = 0, $format = -1, $text = ''){
    switch($op){
        case 'list':
            return array(
                0 => t('Qvideo HTML5 video macro')
                );     
        case 'description':
            return t('Enables users to add HTML5-compatible video with Flash fallback by typing<br /> [qvideo width height posterurl videourl1 videourl2 flashvideourl].');
        case 'settings':
            // No settings interface for this filter
            break;
        case 'no cache':
            // It's OK to cache this filter's output
            return TRUE;
        case 'prepare':
            // No preparation yet
            return $text;
        case 'process':
            return preg_replace_callback("|\[qvideo\s*(\d+)\s*(\d+)\s*(\S+)\s+(.*)\]|i",
                'qvideo_expand', $text);
        default:
            return $text;
    }
}

function video_mimetype($path) {
    // There must be a better way...
    // Return MIME type based on extension of $path
    $mimetypes = array(
        "mpeg"=>   "video/mpeg",
        "mpg" =>   "video/mpeg",
        "mov" =>   "video/quicktime",
        "mp4" =>   "video/mp4",
        "qt"  =>   "video/quicktime",
        "ogv" =>   "video/ogg",
        "flv" =>   "video/x-flv",
        "m4v" =>   "video/x-m4v",
        );
    $ext = pathinfo($path, PATHINFO_EXTENSION);
    $mtype = "";
    if (array_key_exists($ext, $mimetypes)) {
        $mtype = $mimetypes[$ext];
    } 
    return $mtype;
}

function qvideo_expand($matches) {
    if (count($matches) < 5) {
        return "<b>Invalid syntax for qvideo tag</b>";
    }
    $width = $matches[1];
    $height = $matches[2];
    $poster = $matches[3];
    $files = split(" ", $matches[4]);
    $numfiles = count($files);
    if ($numfiles < 2) {
        return "<b>Need to specify at least one video plus one flash file for qvideo tag</b>";
    }
    $htmlfiles = array_slice($files, 0, -1);
    $flashfile = $files[$numfiles-1];
    $flashplayer = '/files/flvplayer.swf';
    
    $isiPad = (bool) strpos($_SERVER['HTTP_USER_AGENT'],'iPad');
    
    $result = "<video width=\"$width\" height=\"$height\" controls preload=\"none\" ";
    // Early iPad OS has a bug if poster is included
    if (! $isiPad) $result .= "poster=\"$poster\"";
    $result .= '>';
    foreach ($htmlfiles as $vfile) {
        
        $result .= "<source src=\"" . $vfile . "\"  type=\"" . video_mimetype($vfile) . "\" />\n";
    };
    $result .= '
     <!-- fallback to Flash: -->
     <embed width="' . $width . '" height="' . (string)($height + 24) . '"
      src="' . $flashplayer . '"
      flashvars="image=' . $poster . '&file='. $flashfile .'" 
      allowfullscreen="true"
      />
    </video>
    ';
    $result .='
      <!-- you *must* offer a download link as they may be able to play the file locally. customise this bit all you want -->
        <p>  <strong>Download Video:</strong>
        <ul>
    ';
    foreach ($htmlfiles as $vfile) {
        $result .= '<li><a href="' . $vfile . '">' . video_mimetype($vfile) . "</a></li>\n";
    };

    $result .="</ul>\n";
    return $result;
}
